Ext.override(Ext.tree.TreeNodeUI, {
    onClick : function(e){ //debugger;
        if(this.dropping){
            e.stopEvent();
            return;
        }
        if(this.fireEvent("beforeclick", this.node, e) !== false){
            var a = e.getTarget('a');
            if(!this.disabled && this.node.attributes.href && a){
                this.fireEvent("click", this.node, e);
                return;
            }else if(a && e.ctrlKey){
                e.stopEvent();
            }
            e.preventDefault();
            if(this.disabled){
                return;
            }

            if(this.node.attributes.singleClickExpand && !this.animating && this.node.hasChildNodes()){
                //this.node.expand(); 
                //this.node.toggle();
            }

            this.fireEvent("click", this.node, e);
        }else{
            e.stopEvent();
        }
    }
});
Ext.override(Ext.tree.TreeNodeUI, {
    onDblClick : function(e){ //debugger;
        e.preventDefault();
        if(this.node.attributes.disabled){
            return;
        }
        if(this.checkbox){
            this.toggleCheck();
        }
        if(this.animating && this.node.hasChildNodes()){
            //this.node.toggle();
            //this.node.expand();
        }
        this.fireEvent("dblclick", this.node, e);
    }
});
	
		${nodeScriptName} = new #if ($lazy ) Ext.tree.AsyncTreeNode #else Ext.tree.TreeNode #end ({
		       id:'${nodeScriptName}', 
		       text:'${text}',
		       href:"${action}",	
		       hrefTarget:'${target}',		
		       qtip :'${tip}',
		       disabled: ${disabled},
#if( ${isGenCheckbox} )		       
		       checked: ${checked},
#end		       				
#if ( $lazy )
               ${dataUrlKey} : '${node.subTreeURL}',
#end
		       allowDrag:${allowDrag},
		       allowDrop:${allowDrop},
		       ${userAttributes}	
		       iconCls :'${iconCls}'		
		     });
		
		
		${rootName} = ${nodeScriptName} ; 
		${treeID}.setRootNode( ${rootName} );
	
		
	var checkChildren = function(node){
		if(node.isLeaf()) {//非叶子节点
		  return;
		}
		    var nodeUI = node.getUI();
			var children = node.childNodes;			
			for(var i = 0; i < children.length; i++) {
			    
			    var child = children[i];
			    
				var childUI = child.getUI();
				if(typeof child.attributes.checked == 'undefined'){
				  continue;
				}  			
				if(child.attributes.checked == node.attributes.checked){
				  continue;
				}  
		     if ( child.attributes.disabled ){
		       return;
		     } 
				
				if ( node.attributes.checked ){
				  child.getOwnerTree().fireEvent('onChecked', child);
				} else {
				  child.getOwnerTree().fireEvent('onUnchecked', child);
				}
				childUI.toggleCheck(node.attributes.checked);
				child.attributes.checked = node.attributes.checked;
				checkChildren(child);
			}		
	 };
	 
	 var checkParents = function(node){
	        if ( node == null ){
	          return;
	        }
	        
	        var nodeUI = node.getUI();
	        if(typeof node.attributes.checked == 'undefined'){
	          return;
	        }
	        if ( node.attributes.checked == false ){//取消父亲.
	          uncheckParents(node);
	          return;
	        }
	        
	        
	        var parentNode = node.parentNode;
	        if ( parentNode == null ){
	          return ;
	        }
		    var parentNodeUI = parentNode.getUI();
		    if(typeof parentNode.attributes.checked == 'undefined'){
		      return;
		    }
		    if (  parentNode.attributes.checked ){//已经选种
		      return;
		    }
		     if ( parentNode.attributes.disabled ){
		       return;
		     }
		     parentNodeUI.toggleCheck(true);
    		 parentNode.getOwnerTree().fireEvent('onChecked', parentNode);
		     parentNode.attributes.checked = true;
		     checkParents(parentNode);
	   };
	   
	 var uncheckParents = function(node){
	        var parentNode = node.parentNode;
	        if ( parentNode == null ){
	          return ;
	        }
		    var parentNodeUI = parentNode.getUI();
			if(typeof parentNode.attributes.checked == 'undefined'){
				  return;
			}
			
			var children = parentNode.childNodes;			
			for(var i = 0; i < children.length; i++) {
			    var child = children[i];
				var childUI = child.getUI();
				if(typeof child.attributes.checked == 'undefined'){
				  continue;
				}
				if(child.attributes.checked == true){
				  return;
				}
			}
		     if ( parentNode.attributes.disabled ){
		       return;
		     }
			
		    parentNodeUI.toggleCheck(false);
		    parentNode.attributes.checked = false;
		    parentNode.getOwnerTree().fireEvent('onUnchecked', parentNode);
		    uncheckParents(parentNode);
		    
	 };
	 
			// 双击节点，checkbox选中了，但是实际并没有触发Ext的checkchange事件，所以本来想checkchange时做点事情的话，这时就失败了。
              //这里需要特别处理下这个双击事件			
          ${treeID}.on('dblclick', function(n, e){
            var ckb = n.getUI().checkbox;
            if(typeof ckb == 'undefined'){
		      return true;
		    }            
		    if ( n.attributes.disabled == 'undefined'){
		      return true;
		    }
		    if ( n.attributes.disabled == true){
		      return true;
		    }   
            n.fireEvent('checkchange',n, ckb.checked)}, 
            ${treeID});
            			
		${treeID}.on('checkchange', function(pNode, pChecked ){
				if ( pChecked ){
				  pNode.getOwnerTree().fireEvent('onChecked', pNode);
				} else {
				  pNode.getOwnerTree().fireEvent('onUnchecked', pNode);
				}
				pNode.attributes.checked = pChecked;
		
		    if ( ${cascadeChild} ){
		     checkChildren(pNode);
		    }		    		    
		    if ( ${cascadeParent} ){
		      checkParents(pNode);
		    }
		    
		});

